--- disk_writer.cc	2019-03-01 22:04:03.791504166 +0700
+++ disk_writer_fix.cc	2019-03-01 22:04:30.350747732 +0700
@@ -519,60 +519,64 @@
 
 		assert (buf.size() == 0 || _midi_buf);
 
-		for (MidiBuffer::iterator i = buf.begin(); i != buf.end(); ++i) {
-			Evoral::Event<MidiBuffer::TimeType> ev (*i, false);
-			if (ev.time() + rec_offset > rec_nframes) {
-				break;
-			}
-#ifndef NDEBUG
-			if (DEBUG_ENABLED(DEBUG::MidiIO)) {
-				const uint8_t* __data = ev.buffer();
-				DEBUG_STR_DECL(a);
-				DEBUG_STR_APPEND(a, string_compose ("mididiskstream %1 capture event @ %2 + %3 sz %4 ", this, ev.time(), start_sample, ev.size()));
-				for (size_t i=0; i < ev.size(); ++i) {
-					DEBUG_STR_APPEND(a,hex);
-					DEBUG_STR_APPEND(a,"0x");
-					DEBUG_STR_APPEND(a,(int)__data[i]);
-					DEBUG_STR_APPEND(a,' ');
-				}
-				DEBUG_STR_APPEND(a,'\n');
-				DEBUG_TRACE (DEBUG::MidiIO, DEBUG_STR(a).str());
-			}
-#endif
-			/* Write events to the capture buffer in samples from session start,
-			   but ignoring looping so event time progresses monotonically.
-			   The source knows the loop length so it knows exactly where the
-			   event occurs in the series of recorded loops and can implement
-			   any desirable behaviour.  We don't want to send event with
-			   transport time here since that way the source can not
-			   reconstruct their actual time; future clever MIDI looping should
-			   probably be implemented in the source instead of here.
-			*/
-			const samplecnt_t loop_offset = _num_captured_loops * loop_length;
-			const samplepos_t event_time = start_sample + loop_offset - _accumulated_capture_offset + ev.time();
-			if (event_time < 0 || event_time < first_recordable_sample) {
-				/* Event out of range, skip */
-				continue;
-			}
-
-			bool skip_event = false;
-			if (mt) {
-				/* skip injected immediate/out-of-band events */
-				MidiBuffer const& ieb (mt->immediate_event_buffer());
-				for (MidiBuffer::const_iterator j = ieb.begin(); j != ieb.end(); ++j) {
-					if (*j == ev) {
-						skip_event = true;
-					}
-				}
-			}
-			if (skip_event) {
-				continue;
-			}
-
-			if (!filter || !filter->filter(ev.buffer(), ev.size())) {
-				_midi_buf->write (event_time, ev.event_type(), ev.size(), ev.buffer());
-			}
-		}
+    if (_midi_buf) {
+
+      for (MidiBuffer::iterator i = buf.begin(); i != buf.end(); ++i) {
+        Evoral::Event<MidiBuffer::TimeType> ev (*i, false);
+        if (ev.time() + rec_offset > rec_nframes) {
+          break;
+        }
+  #ifndef NDEBUG
+        if (DEBUG_ENABLED(DEBUG::MidiIO)) {
+          const uint8_t* __data = ev.buffer();
+          DEBUG_STR_DECL(a);
+          DEBUG_STR_APPEND(a, string_compose ("mididiskstream %1 capture event @ %2 + %3 sz %4 ", this, ev.time(), start_sample, ev.size()));
+          for (size_t i=0; i < ev.size(); ++i) {
+            DEBUG_STR_APPEND(a,hex);
+            DEBUG_STR_APPEND(a,"0x");
+            DEBUG_STR_APPEND(a,(int)__data[i]);
+            DEBUG_STR_APPEND(a,' ');
+          }
+          DEBUG_STR_APPEND(a,'\n');
+          DEBUG_TRACE (DEBUG::MidiIO, DEBUG_STR(a).str());
+        }
+  #endif
+        /* Write events to the capture buffer in samples from session start,
+           but ignoring looping so event time progresses monotonically.
+           The source knows the loop length so it knows exactly where the
+           event occurs in the series of recorded loops and can implement
+           any desirable behaviour.  We don't want to send event with
+           transport time here since that way the source can not
+           reconstruct their actual time; future clever MIDI looping should
+           probably be implemented in the source instead of here.
+        */
+        const samplecnt_t loop_offset = _num_captured_loops * loop_length;
+        const samplepos_t event_time = start_sample + loop_offset - _accumulated_capture_offset + ev.time();
+        if (event_time < 0 || event_time < first_recordable_sample) {
+          /* Event out of range, skip */
+          continue;
+        }
+
+        bool skip_event = false;
+        if (mt) {
+          /* skip injected immediate/out-of-band events */
+          MidiBuffer const& ieb (mt->immediate_event_buffer());
+          for (MidiBuffer::const_iterator j = ieb.begin(); j != ieb.end(); ++j) {
+            if (*j == ev) {
+              skip_event = true;
+            }
+          }
+        }
+        if (skip_event) {
+          continue;
+        }
+
+        if (!filter || !filter->filter(ev.buffer(), ev.size())) {
+          _midi_buf->write (event_time, ev.event_type(), ev.size(), ev.buffer());
+        }
+      }
+
+    }
 
 		g_atomic_int_add (const_cast<gint*>(&_samples_pending_write), nframes);
 
